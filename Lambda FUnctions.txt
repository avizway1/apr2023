Checks all volumes are encrypted or not..??
__________________________

import boto3
import json
import sys

client=boto3.client('ec2')
sns = boto3.client('sns')
sns_topic = "arn:aws:sns:ap-south-1:5011764283:lambdan"
sns_subject =  "Non Encrypted EBS Volumes"
Non_Compliant=[]


def lambda_handler(event, context):
    result = client.describe_volumes( Filters=[{'Name': 'encrypted', 'Values': ['false']},{'Name': 'attachment.device', 'Values': ['/dev/sdf','/dev/sdg','/dev/x*']}])
    msg = "Hi Team," + "\n" + "Below is the list of Non Encrypted Volumes details" "\n" "please take actions on this volumes" + "\n"
    #print(EBS_All)
    #object_contents = response['Volumes'][0]
    #EBS_Vol_All=EBS_All['Volumes']
    #print(EBS_Vol_All)
    for volume in result['Volumes']:
        #if 'Tags' in volume:
        tags = {}
        for tag in volume['Tags']:
            tags[tag['Key']] = tag['Value']
            #print(tags)
        if 'exception' in tags:
           # tags["Key"] != 'encryptexception':
            print(volume['VolumeId'])
        
        else:
            print("---" + volume['VolumeId'])
            noncompliant='Non Compliant Volume id %s.' %volume['VolumeId']
            Non_Compliant.append(noncompliant)
            msg = msg + "\n" + noncompliant
            sns.publish(TopicArn='arn:aws:sns:ap-south-1:501170964283:lambdan', Message = "\n" + msg, Subject='EBS Non Encrypted Volumes')
    # return Non_Compliant

_____________________________________

EBS Volumes status :
_____________________________________

import boto3
import json

client=boto3.client('ec2')
sns = boto3.client('sns')
sns_topic = "arn:aws:sns:ap-south-1:518082393:S3Notifications"
sns_subject =  "Un-attached/not in use EBS Volumes"
Non_Compliant=[]
tags = {}

def lambda_handler(event, context):
    result = client.describe_volumes( Filters=[{'Name': 'status', 'Values': ['available']}])
    msg = "Hi Team," + "\n" + "Below is the list of available status Volumes details" + "\n"
    for volume in result['Volumes']:
        for tag in volume['Tags']:
            tags[tag['Key']] = tag['Value']
            #print(tags)
        if 'avlexception' in tags:
            print('Compliant volume',volume['VolumeId'])
        else:
            print('Non Compliant Volume/Not attached'+ volume['VolumeId'])
            noncompliant='Non Compliant Volume id %s' %volume['VolumeId']
            Non_Compliant.append(noncompliant)
            msg = msg + "\n" + noncompliant
            sns.publish(TopicArn='arn:aws:sns:ap-south-1:518084852393:S3Notifications', Message = "\n" + msg, Subject='EBS Volume in available status')
    # return Non_Compliant

_______________________________________________________________________________________

Stop and start instances using lambda
__________________________________________________________

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "arn:aws:logs:*:*:*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "ec2:Start*",
        "ec2:Stop*"
      ],
      "Resource": "*"
    }
  ]
}
_________________

Stops the EC2 instances
_________________________
import boto3
region = 'ap-south-1'
instances = ['i-12345', 'i-2345']
ec2 = boto3.client('ec2', region_name=region)

def lambda_handler(event, context):
    ec2.stop_instances(InstanceIds=instances)
    print('stopped your instances: ' + str(instances))
_________________________________
Starts the EC2 instances
_________________________________
import boto3
region = 'ap-south-1'
instances = ['i-12345', 'i-2345']
ec2 = boto3.client('ec2', region_name=region)

def lambda_handler(event, context):
    ec2.start_instances(InstanceIds=instances)
    print('started your instances: ' + str(instances))

___________________________________________________

https://www.youtube.com/watch?v=8gfSS-ZIulQ

____________________________________________________

Launch an ec2 instance, make it as webserver.. 
Create a lambda function to telnet to that ec2 instance..  SHould display status as output.

____________________________________________________

Create a lambda function to move data from source bucket to target bucket. But not all the data, whatever object name starting with "a" that files only should move to target bucket.
















